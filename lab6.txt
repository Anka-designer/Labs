#include <iostream>
#include <string>
#include <fstream>

using namespace std;

struct Data {
    string name;
    int quantity;
    bool availability;
    float cost;
};

struct Node {
    struct Data data;

    Node* left; //левый потомок
    Node* right; //правой потомок
};

Node* root; //корень дерева
Node* temp;



void printTree_value(Node*&, int);
void printTree_char(Node*&, char);
void sort(Node*& T);
void sort_str(Node*& T);
void push(Node*&, struct Data);
void push_str(Node*&, struct Data);
void menu();
void deleteTree(Node*&);
void fileWrite(Node*&, ofstream&);
void fileRead(ifstream&);
void printTree(Node*& T);

int main()
{
    menu();

    return 0;
}

void menu() {

    setlocale(LC_ALL, "rus");

    bool exit = 0;

    do {

        cout << "\nМеню:\n";
        cout << "1. Сортировать по названию\n";
        cout << "2. Сортировать по стоимости\n";
        cout << "3. Вывести товары меньше заданной стоимости\n";
        cout << "4. Вывести товары по первой букве\n";
        cout << "5. Добавить новый элемент\n";
        cout << "6. Очистить дерево\n";
        cout << "7. Печать товаров\n";
        cout << "0. Выход\n";
        cout << "-1. Считать с файла\n";
        cout << "-2. Добавить товары в файл\n";
        cout << "Выберите пункт из меню->";
        int choice; cin >> choice;
        cout << endl;

        system("cls");

        switch (choice) {

        case 1: {

            sort_str(root);

            root = temp;
            temp = NULL;

            break;
        }

        case 2: {

            sort(root);

            root = temp;
            temp = NULL;

            break;
        }

        case 3: {

            cout << "Введите желаемое число ->";
            int value; cin >> value;

            system("cls");

            printTree_value(root, value);

            system("pause");
            system("cls");

            break;
        }

        case 4: {

            cout << "Введите первую букву товара ->";
            char start_char; cin >> start_char;

            system("cls");

            printTree_char(root, start_char);

            system("pause");
            system("cls");

            cout << endl;

            break;
        }

        case 5: {

            struct Data data;
            cout << "Введите название товара: "; cin >> data.name;
            cout << "Введите стоимость: "; cin >> data.cost;
            cout << "Введите количество: "; cin >> data.quantity;
            cout << "Введите наличие: "; cin >> data.availability;

            system("cls");

            push(root, data);

            break;
        }

        case 6: {

            deleteTree(root);

            break;
        }


        case 7: {

            system("cls");

            printTree(root);

            system("pause");
            system("cls");

            break;
        }

        case 0: {

            exit = 1;

            break;
        }

        case -1: {

            ifstream fin("tree.txt");

            fileRead(fin);

            break;
        }

        case -2: {

            ofstream fout("tree.txt", ios::trunc);

            fileWrite(root, fout);

            break;
        }

        default: {
            cout << "\nОшибка выбора пункта меню, пожалуйста повторите)\n";
            break;
        }


        }



        if (exit == 1) break;
    } while (exit != 1);

    deleteTree(root);

}

void fileWrite(Node*& T, ofstream& fout) {
    if (!T) return;

    fileWrite(T->left, fout);

    fout << T->data.name << " " << T->data.cost << " " << T->data.quantity << " " << T->data.availability << endl;

    fileWrite(T->right, fout);
}

void fileRead(ifstream& fin) {

    struct Data data;

    while (fin >> data.name >> data.cost >> data.quantity >> data.availability) push(root, data);
}

void sort(Node*& T) { 

    if (T) {

        if (T->left) sort(T->left);
        if (T->right) sort(T->right);

        struct Data data = T->data;
        push(temp, data);
        delete T;
        T = NULL;
    }
    else {
        cout << "Дерево пустое";
    }

}

void sort_str(Node*& T) {

    if (T) {

        if (T->left) sort_str(T->left);
        if (T->right) sort_str(T->right);

        struct Data data = T->data;
        push_str(temp, data);
        delete T;
        T = NULL;
    }
    else {
        cout << "Деревое пустое";
    }

}

void push(Node*& T, struct Data data) {
     
    if (!T) { //если дерева нет, то формируем корень

        T = new Node;
        T->data = data; //поле данных
        T->left = NULL;
        T->right = NULL; //ветви инициализируем пустотой
        return;
    }

    if (data.cost < T->data.cost) { //Если элемент х меньше корневого, уходим влево
        push(T->left, data); //рекурсивно добавляем элемент
    }
    else { //иначе уходим вправо
        push(T->right, data); //рекурсивно добавляем элемент
    }

}

void push_str(Node*& T, struct Data data) {

    if (!T) {

        T = new Node;
        T->data = data;
        T->left = NULL;
        T->right = NULL;
        return;
    }

    if (strcmp(data.name.c_str(), T->data.name.c_str()) < 0) {
        push_str(T->left, data);
    }
    else {
        push_str(T->right, data);
    }

}

void printTree(Node*& T) {
    if (!T) return; //пока не встретится пустой узел

    printTree(T->left); //рекурсивная функция вывода левого поддерева

    cout << "\nНазвание: " << T->data.name;
    cout << "\nСтоимость: " << T->data.cost << "\tРублей";
    cout << "\nКоличество: " << T->data.quantity;
    cout << "\nНаличие: " << (T->data.availability == 1 ? "В наличии" : "Не в наличии ");
    cout << endl;

    printTree(T->right); //рекурсивная функция вывода левого поддерева
}

void printTree_value(Node*& T, int value) {
    if (!T) return;

    printTree_value(T->left, value);

    if (T->data.cost < value) {
        cout << "\nНазвание: " << T->data.name;
        cout << "\nСтоимость: " << T->data.cost << "\tРублей";
        cout << "\nКоличество: " << T->data.quantity;
        cout << "\nНаличие: " << (T->data.availability == 1 ? "В наличии" : "Не в наличии");
        cout << endl;
    }

    printTree_value(T->right, value);
}

void printTree_char(Node*& T, char first_letter) {
    if (!T) return;

    printTree_char(T->left, first_letter);

    if (T->data.name[0] == first_letter) {
        cout << "\nНазвание: " << T->data.name;
        cout << "\nСтоимость: " << T->data.cost << "\tРублей";
        cout << "\nКоличество: " << T->data.quantity;
        cout << "\nНаличие: " << (T->data.availability == 1 ? "В наличии" : "Не в наличии");
        cout << endl;
    }

    printTree_char(T->right, first_letter);

}

void deleteTree(Node*& T) {
    
    if (T) {

        if (T->left) deleteTree(T->left); //рекурсивно удаляем левую ветку
        if (T->right) deleteTree(T->right); //правую

        delete T;  //удаляем корень
        T = NULL;
    }

    else {

        cout << "\nДерево пустое\n";
    }
}