#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <stdlib.h>


using namespace std;

//узел односвязного списка
struct Node {
	
	//данные
	string name;
	int cost;
	bool availability;
	float weight;

	//Указатель на следующий элемент
	struct Node* next;

};
struct Node* top;

bool pop(); 
bool clearing();
bool push_forward(string name, int cost, bool availability, float weight);
bool push_back(string name, int cost, bool availability, float weight);
void display();
Node* peek();
//void fileOpen();
void finding(string index);


int main()
{

	setlocale(LC_ALL, "rus");

	bool exit = 0;

	do {
		cout << "\nМеню:\n";
		cout << "1. Посмотреть корзину\n";
		cout << "2. Добавить товар в корзину\n";
		cout << "3. Вытащить товар из корзины\n";
		cout << "4. Очистить корзину\n";
		cout << "0. Выход\n";
		//cout << "-1. Считать корзину из файла\n";

		short int ch;

		cin >> ch;

		switch (ch)
		{

		case 1: {
			display();
			break;
		}

		case 2: {
			string name;
			int cost;
			bool availability;
			float weight;

			cout << "\nНазвание цветка="; cin >> name;
			cout << "\nСтоимость цветка(в рублях)="; cin >> cost;
			cout << "\nНаличие цветка="; cin >> availability;
			cout << "\nВес цветка="; cin >> weight;

			push_forward(name, cost, availability, weight);
			break;
		}

		case 3: {

			cout << "\nЧто будем искать?:\n";
			string index;

			cin >> index;

			finding(index);




			break;
		}

		case 4: {

			clearing();
			break;
		}

		case 0: {
			exit = 1;
			break;
		}

		/*case -1: {
			fileOpen();
			break;
		}*/


		default:
			cout << "\nПункт меню выбран неправильно, пожалуйста повторите)\n";
			break;
		}



	} while (exit != 1);



	clearing();

	return 0;
}

void display() { // печать всех элементов

	struct Node* temp;

	// проверка на пустой стек
	if (top == NULL) {
		cout << "\nК сожалению, корзина пустая\n" << endl;
	}
	else {

		temp = top;

		cout << "\nТекущий стек: \n";
		while (temp != NULL) {
			// печать данных узла
			cout << "\nНаименование: " << temp->name;
			cout << "\nСтоимость: " << temp->cost << " рублей";
			cout << "\nВес: " << temp->weight << " г";
			cout << "\nВ наличии? " << (temp->availability == true ? "Да" : "Нет");
			cout << endl;

			// переходим к следующему узлу стека
			temp = temp->next;
		}

	}

};

bool pop() {

	struct Node* temp;

	// проверка на пустой стек
	if (top == NULL) {
		/*cout << "\nStack is empty" << endl;

		exit(1);*/
		return 0;
	}
	else {
		// верхнее значение помещаем в temp
		temp = top;

		// в вершину стека кладем следующий узел сверху
		top = top->next;

		// разрушаем связь для удаляемого узла
		temp->next = NULL;

		// освобождаем память верхнего узла
		free(temp);
	}


	return 1;
};

void finding(string index) {

	if (top != NULL) {
		int index_int;
		float index_float;

		struct Node* temp;
		struct Node* temp1;
		temp1 = top;
		temp = top;

		index_int = atoi(index.c_str());
		index_float = atof(index.c_str());

		bool once = 0, check = 0;

		while (temp1 != NULL && temp != NULL) {


			if (index == temp1->name || index_float == temp1->weight || index_int == temp1->cost) {

				if (once == 0) {
					cout << "\nНайденые товары:\n";
					once = 1;
				}

				cout << "\nНазвание: " << temp1->name;
				cout << "\nСтоимость: " << temp1->cost << " рублей";
				cout << "\nВес: " << temp1->weight << " г";
				cout << "\nВ наличии? " << (temp1->availability == true ? "Да" : "Нет");
				cout << endl;

				if (temp1 != top) {
					temp->next = temp1->next;

					free(temp1);
					// помещаем в next указатель на верхний элемент
					temp1 = temp->next;

				}
				else {
					temp1 = top->next;
					temp = top->next;
					pop();
				}

				cout << "\nТовар удален из корзины\n";

			}
			else {
				if (temp1 != NULL && temp != NULL) {
					if (check == 1) {
						temp = temp->next;
					}
					temp1 = temp1->next;
					check = 1;
				}

			}

		}

		if (once == 0) {
			cout << "\nТаких товаров не найдено\n";
		}
		else {
			cout << "\nУдаление товаров ...\n";

			cout << "\nВыбранные товары удалены\n";
		}

	}
	else {

		cout << "\nКорзина пуста\n";

	}




}

bool clearing() {

	if (top != NULL) {
		while (pop() != 0);
		cout << "\nОчищение корзины...\n";
		cout << "\nКорзина успешно очищена\n";

	}
	else {
		cout << "\nКорзина пустая\n";
	}
	return 1;
};

// получение верхнего элемента (вершины стека)
Node* peek() {

	// проверка на пустой стек
	if (top == NULL) cout << "\nСтэк пустой" << endl;
	//Если не пустой
	else {
		return top;
	}

}

bool push_forward(string name, int cost, bool availability, float weight) {

	// создаем новый узел temp и выделяем память
	struct Node* temp;

	temp = new Node();
	
	// Запись данных (инициализируем данные в поле временных данных)
	temp->name = name;
	temp->cost = cost;
	temp->availability = availability;
	temp->weight = weight;


	// Делаем верхним этот узел(// помещаем в next указатель на верхний элемент)
	temp->next = top;//Тот, что был верхним, окажется под ним
	// делаем temp новым верхним элементом (вершина стека)
	top = temp;

	cout << "\nЦветок " << name << " стоимостью " << cost << endl;

	return 1;
};

bool push_back(string name, int cost, bool availability, float weight) {

	// создаем новый узел temp и выделяем память
	struct Node* temp;

	temp = new Node();
	// делаем temp новым верхним элементом (вершина стека)
	temp = top;

	//Перемещаемся в конец
	while (temp->next != NULL) {
		temp = temp->next;
	}

	//Создаем "последний" узел заново
	struct Node* last;

	last = new Node();

	//Восстанавливаем связь
	temp->next = last;

	//Присваиваем последнему узлу данные

	temp->next->name = name;
	temp->next->cost = cost;
	temp->next->availability = availability;
	temp->next->weight = weight;

	cout << "\nЦветок " << name << " стоимостью " << cost << endl;

	return 1;
};

//void fileOpen() {
//
//	//ifstream fin("Stack.txt");
//	string path = "Stack.txt";
//	ifstream fin;
//	fin.open(path);
//
//	if (!fin.is_open())
//	{
//		cout << "Ошибка открытия файла" << endl;
//	}
//	else
//	{
//		cout << "Файл успешно открыт" << endl;
//	}
//
//	string name;
//	int cost;
//	bool availability;
//	float weight;
//
//	fin >> name;
//		cout << name << endl;
//		//push_forward(name, cost, availability, weight);
//	
//
//	fin.close();
//}

